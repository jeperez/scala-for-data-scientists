{"paragraphs":[{"text":"%md\n## Lab 3\n##### Combinators & Maps","dateUpdated":"Feb 25, 2016 2:38:19 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456253917339_-1596106687","id":"20160223-105837_995624010","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Lab 3</h2>\n<h5>Combinators &amp; Maps</h5>\n"},"dateCreated":"Feb 23, 2016 10:58:37 AM","dateStarted":"Feb 25, 2016 2:38:17 PM","dateFinished":"Feb 25, 2016 2:38:17 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:53","focus":true},{"text":"%md\n#####Challenge: Use the exists combinator to implement a primality checker","dateUpdated":"Feb 25, 2016 10:21:17 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456362530831_-419171223","id":"20160224-170850_1890020530","result":{"code":"SUCCESS","type":"HTML","msg":"<h5>Challenge: Use the exists combinator to implement a primality checker</h5>\n"},"dateCreated":"Feb 24, 2016 5:08:50 PM","dateStarted":"Feb 24, 2016 5:11:13 PM","dateFinished":"Feb 24, 2016 5:11:13 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:54"},{"text":"List(1,2,3,4) exists {_ % 5 == 0}","dateUpdated":"Feb 25, 2016 10:45:42 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456425907612_811146257","id":"20160225-104507_7571024","result":{"code":"SUCCESS","type":"TEXT","msg":"res334: Boolean = false\n"},"dateCreated":"Feb 25, 2016 10:45:07 AM","dateStarted":"Feb 25, 2016 10:45:42 AM","dateFinished":"Feb 25, 2016 10:45:42 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:55"},{"text":"def isPrime(n: Int) = ! ((2 until n) exists (n % _ == 0))\n\n\nimport math._\n\ndef isPrime(n: Int) = n match {\n    case n if abs(n) == 1 => false\n    case n =>  ! ((2 until sqrt(abs(n)).toInt + 1) exists (n % _ == 0))\n}","dateUpdated":"Feb 25, 2016 10:55:31 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456361031300_-1013734156","id":"20160224-164351_161252006","result":{"code":"SUCCESS","type":"TEXT","msg":"import math._\nisPrime: (n: Int)Boolean\nisPrime: (n: Int)Boolean\n"},"dateCreated":"Feb 24, 2016 4:43:51 PM","dateStarted":"Feb 24, 2016 5:19:43 PM","dateFinished":"Feb 24, 2016 5:19:44 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:56"},{"text":"(2 to 13) foreach (i => println((i, isPrime(i))))","dateUpdated":"Feb 25, 2016 10:46:27 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456362190309_287755358","id":"20160224-170310_1206192276","result":{"code":"SUCCESS","type":"TEXT","msg":"(2,true)\n(3,true)\n(4,false)\n(5,true)\n(6,false)\n(7,true)\n(8,false)\n(9,false)\n(10,false)\n(11,true)\n(12,false)\n(13,true)\n"},"dateCreated":"Feb 24, 2016 5:03:10 PM","dateStarted":"Feb 25, 2016 10:46:27 AM","dateFinished":"Feb 25, 2016 10:46:27 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:57"},{"text":"val states = Map(\"AL\" -> \"Alabama\", \"AK\" -> \"Alaska\", \"AR\" -> \"Arkansas\")\nstates.getOrElse(\"CA\",\"Unknown\")\nstates.get(\"HI\")","dateUpdated":"Feb 25, 2016 10:59:58 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456359344640_1974019486","id":"20160224-161544_205058015","result":{"code":"SUCCESS","type":"TEXT","msg":"states: scala.collection.immutable.Map[String,String] = Map(AL -> Alabama, AK -> Alaska, AR -> Arkansas)\nres346: String = Unknown\nres347: Option[String] = None\n"},"dateCreated":"Feb 24, 2016 4:15:44 PM","dateStarted":"Feb 25, 2016 10:59:58 AM","dateFinished":"Feb 25, 2016 10:59:59 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:58"},{"text":"","dateUpdated":"Feb 25, 2016 10:59:27 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456426703570_1467264604","id":"20160225-105823_2023893560","result":{"code":"SUCCESS","type":"TEXT","msg":"res342: (Int, Int) = (5,6)\n"},"dateCreated":"Feb 25, 2016 10:58:23 AM","dateStarted":"Feb 25, 2016 10:58:36 AM","dateFinished":"Feb 25, 2016 10:58:36 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:59"},{"text":"states += (\"CA\" -> \"California\")","dateUpdated":"Feb 25, 2016 11:00:19 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456359588248_-1862141586","id":"20160224-161948_346581145","result":{"code":"ERROR","type":"TEXT","msg":"<console>:72: error: value += is not a member of scala.collection.immutable.Map[String,String]\n              states += (\"CA\" -> \"California\")\n                     ^\n"},"dateCreated":"Feb 24, 2016 4:19:48 PM","dateStarted":"Feb 25, 2016 11:00:19 AM","dateFinished":"Feb 25, 2016 11:00:19 AM","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:60"},{"text":"var states2 = states + (\"CA\" -> \"California\")\nstates2 += (\"VT\" -> \"Vermont\")\nstates2","dateUpdated":"Feb 25, 2016 11:00:57 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456359559106_-1969532502","id":"20160224-161919_2069123096","result":{"code":"SUCCESS","type":"TEXT","msg":"states2: scala.collection.immutable.Map[String,String] = Map(AL -> Alabama, AK -> Alaska, AR -> Arkansas, CA -> California)\nres351: scala.collection.immutable.Map[String,String] = Map(AK -> Alaska, VT -> Vermont, AR -> Arkansas, CA -> California, AL -> Alabama)\n"},"dateCreated":"Feb 24, 2016 4:19:19 PM","dateStarted":"Feb 25, 2016 11:00:57 AM","dateFinished":"Feb 25, 2016 11:00:58 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61"},{"text":"//note that states2 is a mutable variable holding an immutable map\ndef printClass(c: Any) = println(c.getClass)\nprintClass(states2)","dateUpdated":"Feb 25, 2016 10:21:17 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456359676840_1052036884","id":"20160224-162116_1454902148","dateCreated":"Feb 24, 2016 4:21:16 PM","dateStarted":"Feb 24, 2016 4:22:59 PM","dateFinished":"Feb 24, 2016 4:22:59 PM","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:62"},{"text":"states - \"AR\"\nstates - \"AR\" - \"AL\"","dateUpdated":"Feb 25, 2016 11:04:27 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456359873890_-1312373158","id":"20160224-162433_1490125267","result":{"code":"SUCCESS","type":"TEXT","msg":"res353: scala.collection.immutable.Map[String,String] = Map(AL -> Alabama, AK -> Alaska)\nres354: scala.collection.immutable.Map[String,String] = Map(AK -> Alaska)\n"},"dateCreated":"Feb 24, 2016 4:24:33 PM","dateStarted":"Feb 25, 2016 11:04:27 AM","dateFinished":"Feb 25, 2016 11:04:28 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:63"},{"text":"states2 map {case (key, value) => key + \": \" + value}","dateUpdated":"Feb 25, 2016 11:07:40 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456358728562_-1375463755","id":"20160224-160528_4447765","result":{"code":"SUCCESS","type":"TEXT","msg":"res361: scala.collection.immutable.Iterable[String] = List(AK: Alaska, VT: Vermont, AR: Arkansas, CA: California, AL: Alabama)\n"},"dateCreated":"Feb 24, 2016 4:05:28 PM","dateStarted":"Feb 25, 2016 11:07:22 AM","dateFinished":"Feb 25, 2016 11:07:22 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64"},{"text":"states2 mapValues {case value => value.toUpperCase}","dateUpdated":"Feb 25, 2016 11:07:42 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456424869968_2036118880","id":"20160225-102749_2041940718","result":{"code":"SUCCESS","type":"TEXT","msg":"res363: scala.collection.immutable.Map[String,String] = Map(AK -> ALASKA, VT -> VERMONT, AR -> ARKANSAS, CA -> CALIFORNIA, AL -> ALABAMA)\n"},"dateCreated":"Feb 25, 2016 10:27:49 AM","dateStarted":"Feb 25, 2016 11:07:42 AM","dateFinished":"Feb 25, 2016 11:07:43 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:65"},{"text":"%md\n#####Challenge: Make a map that has pairs of consectuive Ints as keys and a Boolean b as the value, where b determines whether the sum of the two Ints is a prime.","dateUpdated":"Feb 25, 2016 10:21:18 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456360043085_-1684547938","id":"20160224-162723_880800621","result":{"code":"SUCCESS","type":"HTML","msg":"<h5>Challenge: Make a map that has pairs of consectuive Ints as keys and a Boolean b as the value, where b determines whether the sum of the two Ints is a prime.</h5>\n"},"dateCreated":"Feb 24, 2016 4:27:23 PM","dateStarted":"Feb 25, 2016 10:09:49 AM","dateFinished":"Feb 25, 2016 10:09:49 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:66"},{"text":"val foo = (0 until 10)\nval pairs = foo.zip(foo.tail)","dateUpdated":"Feb 25, 2016 10:21:18 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456359994795_1121933133","id":"20160224-162634_383168623","dateCreated":"Feb 24, 2016 4:26:34 PM","dateStarted":"Feb 24, 2016 5:05:33 PM","dateFinished":"Feb 24, 2016 5:05:33 PM","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:67"},{"text":"//you can fold Maps\ndef makeMap(m: Map[(Int, Int), Boolean], ij: (Int, Int)) = m + (ij -> isPrime(ij._1+ij._2))\n\nval mapA = pairs.foldLeft(scala.collection.immutable.Map() : Map[(Int, Int), Boolean])(makeMap)\n","dateUpdated":"Feb 25, 2016 11:27:37 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456362340282_-2065201994","id":"20160224-170540_107998334","result":{"code":"SUCCESS","type":"TEXT","msg":"makeMap: (m: Map[(Int, Int),Boolean], ij: (Int, Int))scala.collection.immutable.Map[(Int, Int),Boolean]\nmapA: Map[(Int, Int),Boolean] = Map((6,7) -> true, (8,9) -> true, (3,4) -> true, (7,8) -> false, (4,5) -> false, (0,1) -> true, (2,3) -> true, (1,2) -> true, (5,6) -> true)\n"},"dateCreated":"Feb 24, 2016 5:05:40 PM","dateStarted":"Feb 24, 2016 5:06:15 PM","dateFinished":"Feb 24, 2016 5:06:15 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:68"},{"text":"","dateUpdated":"Feb 25, 2016 11:20:50 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456427985279_-1377917930","id":"20160225-111945_1244413060","dateCreated":"Feb 25, 2016 11:19:45 AM","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:69"},{"text":"//you can also filter maps\nmapA filter {case (tup, bool) => !bool}","dateUpdated":"Feb 25, 2016 10:21:18 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456360505169_-482164942","id":"20160224-163505_466599570","result":{"code":"SUCCESS","type":"TEXT","msg":"res265: scala.collection.immutable.Map[(Int, Int),Boolean] = Map((7,8) -> false, (4,5) -> false)\n"},"dateCreated":"Feb 24, 2016 4:35:05 PM","dateStarted":"Feb 24, 2016 5:02:19 PM","dateFinished":"Feb 24, 2016 5:02:20 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:70"},{"text":"//a map in the opposite direction\nval mapB = pairs groupBy {case (i, j) => isPrime(i + j)}","dateUpdated":"Feb 25, 2016 10:23:23 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456357735236_-1560364344","id":"20160224-154855_400159247","result":{"code":"SUCCESS","type":"TEXT","msg":"mapB: scala.collection.immutable.Map[Boolean,scala.collection.immutable.IndexedSeq[(Int, Int)]] = Map(false -> Vector((0,1), (4,5), (7,8)), true -> Vector((1,2), (2,3), (3,4), (5,6), (6,7), (8,9)))\n"},"dateCreated":"Feb 24, 2016 3:48:55 PM","dateStarted":"Feb 25, 2016 10:11:20 AM","dateFinished":"Feb 25, 2016 10:11:21 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71"},{"text":"//counting uniques\nval words = List(\"one\", \"two\", \"one\", \"three\", \"four\", \"two\", \"one\")\nval counts = words.groupBy(w => w).mapValues(_.size)","dateUpdated":"Feb 25, 2016 11:32:54 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456358374053_-987189174","id":"20160224-155934_261288418","result":{"code":"SUCCESS","type":"TEXT","msg":"words: List[String] = List(one, two, one, three, four, two, one)\ncounts: scala.collection.immutable.Map[String,Int] = Map(one -> 3, three -> 1, four -> 1, two -> 2)\n"},"dateCreated":"Feb 24, 2016 3:59:34 PM","dateStarted":"Feb 25, 2016 11:32:54 AM","dateFinished":"Feb 25, 2016 11:32:55 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:72"},{"text":"//combining maps\nval englishToSpanish = Map(\"one\"->\"uno\", \"two\"->\"dos\", \"four\"->\"quatro\")\ncounts map {case (k, v) => englishToSpanish.getOrElse(k, \"no recuerdo\") -> v}\n\n\nval merged = map1 ++ map2.map{ case (k,v) => k -> (v - map1.getOrElse(k,0)) }","dateUpdated":"Feb 25, 2016 12:00:25 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456357738396_1196776923","id":"20160224-154858_1517207416","result":{"code":"SUCCESS","type":"TEXT","msg":"englishToSpanish: scala.collection.immutable.Map[String,String] = Map(one -> uno, two -> dos, four -> quatro)\nres313: scala.collection.immutable.Map[String,Int] = Map(uno -> 3, no recuerdo -> 1, quatro -> 1, dos -> 2)\n"},"dateCreated":"Feb 24, 2016 3:48:58 PM","dateStarted":"Feb 25, 2016 10:18:49 AM","dateFinished":"Feb 25, 2016 10:18:50 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:73"},{"text":"counts\ncounts ++ englishToSpanish map {case (k, v) => counts getOrElse() }","dateUpdated":"Feb 25, 2016 11:57:30 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"tableHide":false,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456424436248_-669680572","id":"20160225-102036_1712021252","result":{"code":"SUCCESS","type":"TEXT","msg":"res369: scala.collection.immutable.Map[String,Int] = Map(one -> 3, three -> 1, four -> 1, two -> 2)\nres370: scala.collection.immutable.Map[String,Any] = Map(one -> uno, three -> 1, four -> quatro, two -> dos)\n"},"dateCreated":"Feb 25, 2016 10:20:36 AM","dateStarted":"Feb 25, 2016 11:36:15 AM","dateFinished":"Feb 25, 2016 11:36:16 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:74"},{"text":"%md\n#####Challenge: Implement an anagram distance function.\n\nGiven a string `ab`, find the minimum number of characters of the first half of the string `a`  needed to change it into an anagram of the second half of the string `b`.  You can neither add nor delete characters from the first string. Only replacement of the characters with new ones is allowed. Return ‘-1’ if it is not possible (e.g. in the case of an odd-length string).\n\n\nSample Input: `aaabbb`, `ab`, `abc`, `mnop`, `xyyx`\nSample Output: 3, 1, -1, 2, 0","dateUpdated":"Feb 25, 2016 10:21:18 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456363318855_-1745015180","id":"20160224-172158_736463682","result":{"code":"SUCCESS","type":"HTML","msg":"<h5>Challenge: Implement an anagram distance function.</h5>\n<p>Given a string <code>ab</code>, find the minimum number of characters of the first half of the string <code>a</code>  needed to change it into an anagram of the second half of the string <code>b</code>.  You can neither add nor delete characters from the first string. Only replacement of the characters with new ones is allowed. Return ‘-1’ if it is not possible (e.g. in the case of an odd-length string).</p>\n<p>Sample Input: <code>aaabbb</code>, <code>ab</code>, <code>abc</code>, <code>mnop</code>, <code>xyyx</code>\n<br  />Sample Output: 3, 1, -1, 2, 0</p>\n"},"dateCreated":"Feb 24, 2016 5:21:58 PM","dateStarted":"Feb 24, 2016 5:35:21 PM","dateFinished":"Feb 24, 2016 5:35:21 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:75"},{"text":"def getHist(s: String) = s.toCharArray.groupBy(c => c).mapValues(_.length)\ndef editDist(map1: Map[Char,Int], map2: Map[Char,Int]): Int = {\n    val merged = map1 ++ map2.map{ case (k,v) => k -> (v - map1.getOrElse(k,0)) }\n    merged.mapValues(math.abs(_)).foldLeft(0)(_+_._2) / 2\n}\n\ndef editDist1(string1: String, string2: String): Int = {\n\n    def distance_acc(acc:Int,  index:Int) : Int ={\n        if(string1.charAt(index) != string2.charAt(index)) acc + 1 else acc\n    }\n\n    (0 /: (0 until string1.length))(distance_acc)\n}\n\n\ndef anagramDist(s: String): Int =  {\n    if (s.size % 2 != 0) -1\n    else {\n        val a = getHist(s.take(s.size/2))\n        val b = getHist(s.drop(s.size/2))\n        editDist(a,b)\n    }\n}\n","dateUpdated":"Feb 25, 2016 2:31:05 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorHide":false,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456358413355_-601609479","id":"20160224-160013_1712793025","result":{"code":"SUCCESS","type":"TEXT","msg":"getHist: (s: String)scala.collection.immutable.Map[Char,Int]\neditDist: (map1: Map[Char,Int], map2: Map[Char,Int])Int\nanagramDist: (s: String)Int\n"},"dateCreated":"Feb 24, 2016 4:00:13 PM","dateStarted":"Feb 24, 2016 4:04:27 PM","dateFinished":"Feb 24, 2016 4:04:28 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:76"},{"text":"//anagramDist(s: String): Int\nList(\"aaabbb\",\"ab\",\"abc\",\"mnop\",\"xyyx\") map anagramDist","dateUpdated":"Feb 25, 2016 11:48:39 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456358605769_928611873","id":"20160224-160325_1567670287","result":{"code":"SUCCESS","type":"TEXT","msg":"res373: List[Int] = List(3, 1, -1, 1, 0)\n"},"dateCreated":"Feb 24, 2016 4:03:25 PM","dateStarted":"Feb 25, 2016 11:48:21 AM","dateFinished":"Feb 25, 2016 11:48:21 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:77"},{"text":"def checkT(board: List[(Int,Int)], next: (Int,Int)): Boolean = {\n\tdef tile(index: Int): Int = {\n\t\tval y: Int = index % 9\n\t\tval x: Int = index / 9\n\t\t(x,y) match {\n\t\t\tcase _ if (0 to 2 contains y) && (0 to 2 contains x) => 0\n\t\t\tcase _ if (3 to 5 contains y) && (0 to 2 contains x) => 1\n\t\t\tcase _ if (6 to 8 contains y) && (0 to 2 contains x) => 2\n\t\t\tcase _ if (0 to 2 contains y) && (3 to 5 contains x) => 3\n\t\t\tcase _ if (3 to 5 contains y) && (3 to 5 contains x) => 4\n\t\t\tcase _ if (6 to 8 contains y) && (3 to 5 contains x) => 5\n\t\t\tcase _ if (0 to 2 contains y) && (6 to 8 contains x) => 6\n\t\t\tcase _ if (3 to 5 contains y) && (6 to 8 contains x) => 7\n\t\t\tcase _ if (6 to 8 contains y) && (6 to 8 contains x) => 8\n\t\t}\n\t} \n\tdef check(b: Boolean, tuple: (Int,Int)) = \n\t\t{ b && ((tile(tuple._1) == tile(next._1) && tuple._2 != next._2) || tile(tuple._1) != tile(next._1)) }\n\tboard.foldLeft(true)(check)    \n}\n\ndef notPlayed(board: List[(Int,Int)], index: Int): Boolean = {\n\t!(board map {x => x._1} contains index)\n}\n\ndef isLegal(board: List[(Int,Int)], next: (Int,Int)): Boolean = {\n\tcheckX(board, next) && checkY(board, next) && checkT(board, next) \n}\n\n//Ben's soln:\n\n/* Get the tile of a given position */\ndef getTile(pos: Int): Int = {\n    val row = pos / 9 / 3 + 1\n    val col = pos % 9 / 3 + 1\n    row * 3 - (3 - col)\n}\n\n//check tiles for uniqueness\ndef checkT(board: List[(Int,Int)], next: (Int,Int)): Boolean = {\n    val nextTile = getTile(next._1)\n    def check(b: Boolean, tuple: (Int, Int)) = {\n        // Tile is combination of X and Y\n        val tupleTile = getTile(tuple._1)\n        b && ((tupleTile == nextTile && tuple._2 != next._2) || tupleTile != nextTile)\n    }\n    board.foldLeft(true)(check)   \n}\n\n//check that a given position has not been filled\ndef notPlayed(board: List[(Int,Int)], index: Int): Boolean = board match {\n case Nil => true\n case (pos, v) :: xs if(pos==index) => v == 0\n case _ :: xs => notPlayed(xs, index)\n}\n","dateUpdated":"Feb 25, 2016 10:21:19 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456201573379_-1708111153","id":"20160222-202613_1317331652","result":{"code":"SUCCESS","type":"TEXT","msg":"checkT: (board: List[(Int, Int)], next: (Int, Int))Boolean\nnotPlayed: (board: List[(Int, Int)], index: Int)Boolean\nisLegal: (board: List[(Int, Int)], next: (Int, Int))Boolean\n"},"dateCreated":"Feb 22, 2016 8:26:13 PM","dateStarted":"Feb 24, 2016 2:48:32 PM","dateFinished":"Feb 24, 2016 2:48:35 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:84"},{"text":"","dateUpdated":"Feb 25, 2016 10:21:19 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456357135942_722492087","id":"20160224-153855_1273532917","dateCreated":"Feb 24, 2016 3:38:55 PM","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:87"},{"text":"def sineString(s: String): String = /* code */\nprintln(sineString(\"Hello World!\")) \ne lHloWrdlo!","dateUpdated":"Feb 25, 2016 2:20:23 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456353129003_1604405562","id":"20160224-143209_960739783","dateCreated":"Feb 24, 2016 2:32:09 PM","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:88"},{"text":"def sineString(s: String): String = {\n\n\tdef foo(x:(Char,Int)) = (x._1,x._2%4)\n\n\tval rows = s.toCharArray.zipWithIndex.map(foo).groupBy {\n\t\tcase (x,0) => \"middle\"\n\t\tcase (x,1) => \"upper\"\n\t\tcase (x,2) => \"middle\"\n\t\tcase (x,3) => \"lower\"\n\t}  \n\n\trows.valuesIterator.toList.reverse.flatten.map(_._1).mkString\n}\n\nprintln(sineString(\"Hello World!\")) ","dateUpdated":"Feb 25, 2016 2:20:23 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456352795938_-510465553","id":"20160224-142635_525539430","result":{"code":"SUCCESS","type":"TEXT","msg":"sineString: (s: String)String\ne lHloWrdlo!\n"},"dateCreated":"Feb 24, 2016 2:26:35 PM","dateStarted":"Feb 24, 2016 2:28:49 PM","dateFinished":"Feb 24, 2016 2:28:50 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:89"},{"text":"","dateUpdated":"Feb 25, 2016 10:21:19 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456356097704_1847424016","id":"20160224-152137_748734593","dateCreated":"Feb 24, 2016 3:21:37 PM","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:90"}],"name":"sfds-lab3","id":"2BBS2FMZ5","angularObjects":{"2BCSZYWYA":[],"2B956YWNV":[],"2BC6W6857":[],"2B92D2YFF":[],"2BBG6HC2F":[],"2B9T31FJZ":[],"2BBJF778P":[],"2BB6YM4DJ":[],"2BBRY8E4A":[],"2BAQREC7J":[],"2BC97GWDB":[],"2BBX9KVBV":[],"2BADXE7AU":[],"2BBBV3PP8":[]},"config":{"looknfeel":"default"},"info":{}}