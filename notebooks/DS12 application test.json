{"paragraphs":[{"text":"def isItPossible(a: Int, b: Int, c: Int, d: Int): Boolean = (c, d) match {\n  case (c, d) if c == a && d == b => true\n  case (c, d) if a > c || b > d => false\n  case _ => isItPossible(a, a + b, c, d) || isItPossible(a + b, b, c, d)\n}\n\nisItPossible(1, 4, 5, 9)","dateUpdated":"Feb 22, 2016 11:55:21 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456170291144_-1860485103","id":"20160222-114451_683825584","result":{"code":"SUCCESS","type":"TEXT","msg":"isItPossible: (a: Int, b: Int, c: Int, d: Int)Boolean\nres524: Boolean = true\n"},"dateCreated":"Feb 22, 2016 11:44:51 AM","dateStarted":"Feb 22, 2016 11:52:52 AM","dateFinished":"Feb 22, 2016 11:52:53 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:798"},{"text":"def pitDepth(p: Int, q: Int, r: Int) = (p - q) min (r - q)\n\ndef updateDepths(pqrd: (Int,Int,Int,Int), x: Int): (Int,Int,Int,Int) = pqrd match {\n  case (p,q,r,d) if x >  p && x < q  => (x,q,r,d) //upslope reset\n  case (p,q,r,d) if x <= q           => (p,x,r,d) //update q\n  case (p,q,r,d) if x >  q && x >= r => (p,q,x,d max pitDepth(p,q,x)) //update r and d\n  case (p,q,r,d) if x >  q && x <  r => (r,x,Int.MinValue, d max pitDepth(p,q,r)) //update d and reset\n}\n\ndef maxDepth(list: List[Int]): Int = list match {\n  case Nil => -1 \n  case head :: tail => tail.foldLeft((head,Int.MaxValue,Int.MinValue,-1)) ((quad,x)=>updateDepths(quad,x))._4\n}","dateUpdated":"Feb 22, 2016 12:03:01 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456171315252_1077709263","id":"20160222-120155_1548156942","dateCreated":"Feb 22, 2016 12:01:55 PM","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:799"},{"text":"def updateDiffs(tup: (Int, Int, Int), x: Int): (Int, Int, Int) = tup match {\n  case (mn, mx, diff) if x < mn => (x, x, diff) //reset\n  case (mn, mx, diff) if x > mx => (mn, x, (x-mn) max diff)\n  case _ => tup\n}\n\ndef maxDifference(list: List[Int]): Int = list match {\n  case Nil => -1 \n  case head :: tail => tail.foldLeft((head,head,-1)) ((tup,x)=>updateDiffs(tup,x))._3\n}\n\nmaxDifference(List(2,3,10,2,4,8,1))\nmaxDifference(List(7,9,5,6,3,2))","dateUpdated":"Feb 22, 2016 12:21:25 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456170645887_1193139390","id":"20160222-115045_332154142","result":{"code":"SUCCESS","type":"TEXT","msg":"updateDiffs: (tup: (Int, Int, Int), x: Int)(Int, Int, Int)\nmaxDifference: (list: List[Int])Int\nres542: Int = 8\nres543: Int = 2\n"},"dateCreated":"Feb 22, 2016 11:50:45 AM","dateStarted":"Feb 22, 2016 12:21:25 PM","dateFinished":"Feb 22, 2016 12:21:26 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:800"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456172057242_308853434","id":"20160222-121417_1461997223","dateCreated":"Feb 22, 2016 12:14:17 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:801","text":"def getHist(s: String) = s.toCharArray.groupBy(c => c).mapValues(_.length)\ndef editDist(map1: Map[Char,Int], map2: Map[Char,Int]): Int = {\n  val merged = map1 ++ map2.map{ case (k,v) => k -> (v - map1.getOrElse(k,0)) }\n  merged.mapValues(math.abs(_)).foldLeft(0)(_+_._2) / 2\n}\nval a = getHist(\"xyyx\")\nval b = getHist(\"yxxy\")\neditDist(a,b)","dateUpdated":"Feb 22, 2016 1:08:31 PM","dateFinished":"Feb 22, 2016 1:08:10 PM","dateStarted":"Feb 22, 2016 1:08:10 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"getHist: (s: String)scala.collection.immutable.Map[Char,Int]\neditDist: (map1: Map[Char,Int], map2: Map[Char,Int])Int\na: scala.collection.immutable.Map[Char,Int] = Map(a -> 1)\nb: scala.collection.immutable.Map[Char,Int] = Map(b -> 1)\nres578: Int = 1\n"},"focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456175034349_-1442291005","id":"20160222-130354_1891093055","dateCreated":"Feb 22, 2016 1:03:54 PM","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:908"}],"name":"DS12 application test","id":"2BF2P1SMA","angularObjects":{"2BBX9KVBV":[],"2B9T31FJZ":[],"2BC97GWDB":[],"2BBRY8E4A":[],"2BBJF778P":[],"2BADXE7AU":[],"2BCSZYWYA":[],"2BC6W6857":[],"2BBBV3PP8":[],"2B956YWNV":[],"2BB6YM4DJ":[],"2B92D2YFF":[],"2BBG6HC2F":[],"2BAQREC7J":[]},"config":{"looknfeel":"default"},"info":{}}