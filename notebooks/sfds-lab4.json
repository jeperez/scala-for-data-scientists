{"paragraphs":[{"text":"def foo1[A] (elt: A , rle: List[(Int, A)]) ","dateUpdated":"Feb 15, 2016 7:47:32 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1455594237837_-290485050","id":"20160215-194357_378498480","dateCreated":"Feb 15, 2016 7:43:57 PM","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:528"},{"text":"def foo1[A] (elt: A , rle: List[(Int, A)]) = rle match {\n  case (count, value) :: tail =>\n    if (value == elt) (count + 1, elt) :: tail\n    else (1, elt) :: rle\n  case Nil => (1, elt) :: rle\n  }\n\ndef encodeRLE[A] (list: List[A]): List[(Int, A)] = list.foldRight(List[(Int, A)]())(foo1)\n\nval l = List(\"a\",\"a\",\"a\",\"b\",\"b\",\"c\")\nencodeRLE(l)\n","dateUpdated":"Feb 16, 2016 12:33:40 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1455592720505_1710846866","id":"20160215-191840_1841376624","result":{"code":"SUCCESS","type":"TEXT","msg":"foo1: [A](elt: A, rle: List[(Int, A)])List[(Int, A)]\nencodeRLE: [A](list: List[A])List[(Int, A)]\nl: List[String] = List(a, a, a, b, b, c)\nres505: List[(Int, String)] = List((3,a), (2,b), (1,c))\n"},"dateCreated":"Feb 15, 2016 7:18:40 PM","dateStarted":"Feb 15, 2016 7:45:22 PM","dateFinished":"Feb 15, 2016 7:45:22 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:529"},{"text":"def foo2 [A] (c: (Int, A), og: List[A]): List[A] = {\n  var result = og\n  for (_ <- 1 to c._1) result = c._2 :: result\n  result\n}\n//try List.fill instead\n\ndef decodeRLE[A](list: List[(Int, A)]): List[A] = list.foldRight(List[A]())(foo2)\n\nval l = List(\"a\",\"a\",\"a\",\"b\",\"b\",\"c\")\ndecodeRLE(encodeRLE(l))","dateUpdated":"Feb 16, 2016 12:33:46 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1455592727855_1788196719","id":"20160215-191847_608923045","result":{"code":"SUCCESS","type":"TEXT","msg":"foo2: [A](c: (Int, A), r: List[A])List[A]\ndecodeRLE: [A](list: List[(Int, A)])List[A]\nl: List[String] = List(a, a, a, b, b, c)\nres494: List[String] = List(a, a, a, b, b, c)\n"},"dateCreated":"Feb 15, 2016 7:18:47 PM","dateStarted":"Feb 15, 2016 7:40:56 PM","dateFinished":"Feb 15, 2016 7:40:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:530"},{"text":"def foo2 [A] (c: (Int, A), og: List[A]): List[A] = List.fill(c._1)(c._2) ::: og\n\ndef decodeRLE[A](list: List[(Int, A)]): List[A] = list.foldRight(List[A]())(foo2)\n\nval l = List(\"a\",\"a\",\"a\",\"b\",\"b\",\"c\")\ndecodeRLE(encodeRLE(l))\n","dateUpdated":"Feb 16, 2016 12:33:48 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1455593776835_-1895315395","id":"20160215-193616_1481169166","result":{"code":"SUCCESS","type":"TEXT","msg":"foo2: [A](c: (Int, A), og: List[A])List[A]\ndecodeRLE: [A](list: List[(Int, A)])List[A]\nl: List[String] = List(a, a, a, b, b, c)\nres509: List[String] = List(a, a, a, b, b, c)\n"},"dateCreated":"Feb 15, 2016 7:36:16 PM","dateStarted":"Feb 15, 2016 7:46:21 PM","dateFinished":"Feb 15, 2016 7:46:22 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:531"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456172536462_1144389006","id":"20160222-122216_2111454084","dateCreated":"Feb 22, 2016 12:22:16 PM","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:744","text":"def updateDiffs(tup: (Int, Int, Int), x: Int): (Int, Int, Int) = tup match {\n  case (mn, mx, diff) if x < mn => (x, x, diff) //reset\n  case (mn, mx, diff) if x > mx => (mn, x, (x-mn) max diff)\n  case _ => tup\n}\n\ndef maxDifference(list: List[Int]): Int = list match {\n  case Nil => -1 \n  case head :: tail => tail.foldLeft((head,head,-1)) ((tup,x)=>updateDiffs(tup,x))._3\n}\n\nmaxDifference(List(2,3,10,2,4,8,1))\nmaxDifference(List(7,9,5,6,3,2))","dateUpdated":"Feb 22, 2016 12:22:28 PM"},{"text":"def pitDepth(p: Int, q: Int, r: Int) = (p - q) min (r - q)\n\ndef updateDepths(pqrd: (Int,Int,Int,Int), x: Int): (Int,Int,Int,Int) = pqrd match {\n  case (p,q,r,d) if x >  p && x < q  => (x,q,r,d) //upslope reset\n  case (p,q,r,d) if x <= q           => (p,x,r,d) //update q\n  case (p,q,r,d) if x >  q && x >= r => (p,q,x,d max pitDepth(p,q,x)) //update r and d\n  case (p,q,r,d) if x >  q && x <  r => (r,x,Int.MinValue, d max pitDepth(p,q,r)) //update d and reset\n}\n\ndef maxDepth(list: List[Int]): Int = list match {\n  case Nil => -1 \n  case head :: tail => tail.foldLeft((head,Int.MaxValue,Int.MinValue,-1)) ((quad,x)=>updateDepths(quad,x))._4\n}","dateUpdated":"Feb 18, 2016 9:54:50 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1455407620045_-1019027413","id":"20160213-155340_1167678115","result":{"code":"SUCCESS","type":"TEXT","msg":"pitDepth: (p: Int, q: Int, r: Int)Int\nupdateDepths: (pqrd: (Int, Int, Int, Int), x: Int)(Int, Int, Int, Int)\nmaxDepth: (list: List[Int])Int\n"},"dateCreated":"Feb 13, 2016 3:53:40 PM","dateStarted":"Feb 15, 2016 7:13:42 PM","dateFinished":"Feb 15, 2016 7:13:43 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:532"},{"text":"/*\nYou store two triplets, one as the best, and one as a working set.\n\n1) Mark the first element as P in the working set\n2) Read an item while Q is not marked\n    If lesser than the previous, keep going: 2)\n    If greater or equal than the previous, mark the previous as Q\n    If you run out of numbers then it is no real pit\n3) Read an item while R is not marked\n    If greater than the previous, keep going: 3)\n    If lesser or equal than the previous, mark the one before it as R\n    If you run out of numbers, mark the last one as R, goto 4)\n4) Decide if this is better than the best. Mark the previous element as P in the working set, set Q = R = null, go to 2) if you have any items left\n*/","dateUpdated":"Feb 16, 2016 11:21:13 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1455594516612_627336479","id":"20160215-194836_508059465","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Feb 15, 2016 7:48:36 PM","dateStarted":"Feb 15, 2016 7:48:52 PM","dateFinished":"Feb 15, 2016 7:48:52 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:534"},{"text":"val A: Array[Int] = Array(0,1,3,-2,0,1,0,-3,2,3)\nmaxDepth(A.toList)","dateUpdated":"Feb 18, 2016 9:54:45 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1455408033779_400889785","id":"20160213-160033_753212399","result":{"code":"SUCCESS","type":"TEXT","msg":"A: Array[Int] = Array(0, 1, 3, -2, 0, 1, 0, -3, 2, 3)\nres421: Int = 4\n"},"dateCreated":"Feb 13, 2016 4:00:33 PM","dateStarted":"Feb 15, 2016 7:13:49 PM","dateFinished":"Feb 15, 2016 7:13:49 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:535"},{"text":"updateDepths((1,-3,-2147483648,3),2)","dateUpdated":"Feb 18, 2016 9:54:42 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1455408040271_2087259539","id":"20160213-160040_1459729094","result":{"code":"SUCCESS","type":"TEXT","msg":"(1,-3,-2147483648,3)\nres142: (Int, Int, Int, Int) = (1,-3,2,3)\n"},"dateCreated":"Feb 13, 2016 4:00:40 PM","dateStarted":"Feb 13, 2016 4:28:58 PM","dateFinished":"Feb 13, 2016 4:28:59 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:536"},{"text":"val a: Array[Int] = Array(0,1,2,2,3,5)\nval b: Array[Int] = Array(500000,500000,0,0,0,20000)\nval c: Array[Double] = A zip B map {case (a,b) => a + b / 1000000.0}  \n\nvar low = 0\nvar high = c.size-1\nvar count: Int = 0\n\nwhile (low < high) {\n  val v: Double = c(high) / (c(high)- 1);\n  while (low < high && c(low) < v) low += 1\n  count += high - low\n  high -= 1\n}\ncount","dateUpdated":"Feb 16, 2016 11:29:50 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1455418458361_244991954","id":"20160213-185418_2102970202","result":{"code":"SUCCESS","type":"TEXT","msg":"a: Array[Int] = Array(0, 1, 2, 2, 3, 5)\nb: Array[Int] = Array(500000, 500000, 0, 0, 0, 20000)\nc: Array[Double] = Array(0.5, 1.5, 2.0, 2.0, 3.0, 5.02)\nlow: Int = 0\nhigh: Int = 5\ncount: Int = 0\nres380: Int = 8\n"},"dateCreated":"Feb 13, 2016 6:54:18 PM","dateStarted":"Feb 15, 2016 2:19:24 PM","dateFinished":"Feb 15, 2016 2:19:25 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:537"},{"text":"val ind = (0 to c.size-1) toList\nval s = for {\n    low <- ind\n    hi <- ind.reverse\n    if low < hi && c(low) >= c(hi)/(c(hi)-1)\n} yield (low,hi)\n\ns.toSet","dateUpdated":"Feb 15, 2016 2:21:50 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1455418377162_-1577502289","id":"20160213-185257_220281111","result":{"code":"SUCCESS","type":"TEXT","msg":"warning: there were 1 feature warning(s); re-run with -feature for details\nind: List[Int] = List(0, 1, 2, 3, 4, 5)\ns: List[(Int, Int)] = List((1,5), (1,4), (2,5), (2,4), (2,3), (3,5), (3,4), (4,5))\nres383: scala.collection.immutable.Set[(Int, Int)] = Set((2,5), (1,5), (3,4), (3,5), (4,5), (1,4), (2,4), (2,3))\n"},"dateCreated":"Feb 13, 2016 6:52:57 PM","dateStarted":"Feb 15, 2016 2:21:50 PM","dateFinished":"Feb 15, 2016 2:21:50 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:538"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1455419000573_2082918837","id":"20160213-190320_420576097","dateCreated":"Feb 13, 2016 7:03:20 PM","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:539"}],"name":"sfds-lab4","id":"2BCE8JQ3V","angularObjects":{"2BBX9KVBV":[],"2B9T31FJZ":[],"2BC97GWDB":[],"2BBRY8E4A":[],"2BBJF778P":[],"2BADXE7AU":[],"2BCSZYWYA":[],"2BC6W6857":[],"2BBBV3PP8":[],"2B956YWNV":[],"2BB6YM4DJ":[],"2B92D2YFF":[],"2BBG6HC2F":[],"2BAQREC7J":[]},"config":{"looknfeel":"default"},"info":{}}