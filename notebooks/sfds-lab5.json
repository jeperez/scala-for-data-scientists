{"paragraphs":[{"text":"def checkX(board: List[(Int,Int)], next: (Int,Int)): Boolean = {\n\tdef check(b: Boolean, tuple: (Int,Int)) = \n\t\t{ b && ((tuple._1 / 9 == next._1 / 9 && tuple._2 != next._2) || tuple._1 / 9 != next._1 / 9) }\n\tboard.foldLeft(true)(check)      \n}\n\ndef checkY(board: List[(Int,Int)], next: (Int,Int)): Boolean = {\n\tdef check(b: Boolean, tuple: (Int,Int)) = \n\t\t{ b && ((tuple._1 % 9 == next._1 % 9 && tuple._2 != next._2) || tuple._1 % 9 != next._1 % 9) }\n\tboard.foldLeft(true)(check)    \n}","dateUpdated":"Feb 22, 2016 8:28:48 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456201446965_51006267","id":"20160222-202406_364082917","result":{"code":"SUCCESS","type":"TEXT","msg":"checkX: (board: List[(Int, Int)], next: (Int, Int))Boolean\ncheckY: (board: List[(Int, Int)], next: (Int, Int))Boolean\n"},"dateCreated":"Feb 22, 2016 8:24:06 PM","dateStarted":"Feb 22, 2016 8:28:48 PM","dateFinished":"Feb 22, 2016 8:28:49 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:721","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456201471950_-1797095942","id":"20160222-202431_1145186492","dateCreated":"Feb 22, 2016 8:24:31 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:722","text":"def sudokuPlot(board: List[(Int,Int)]): String = {\n\tval out = Array.ofDim[Int](9,9)\n\tfor {move <- board} out(move._1 / 9)(move._1 % 9) = move._2\n\tout.map({_.mkString(\" \")}).mkString(\"\\n\")\n}\n\n\nval initial = List((0,5),(1,3),(4,7),(9,6),(12,1),(13,9),(14,5),(19,9),(20,8),(25,6),(27,8),(31,6),(35,3),(36,4),(39,8),(41,3),(44,1),(45,7),(49,2),(53,6),(55,6),(60,2),(61,8),(66,4),(67,1),(68,9),(71,5),(76,8),(79,7),(80,9))\nprintln(sudokuPlot(initial))\nprintln(\"\\n\")\nprintln(sudokuPlot(sudokuSolve(initial).toList.head))","dateUpdated":"Feb 22, 2016 8:29:36 PM","dateFinished":"Feb 22, 2016 8:26:51 PM","dateStarted":"Feb 22, 2016 8:26:51 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"initial: List[(Int, Int)] = List((12,1), (13,9), (14,5), (19,9), (20,8), (25,6), (27,8), (31,6), (35,3), (36,4), (39,8), (41,3), (44,1), (45,7), (49,2), (53,6), (55,6), (60,2), (61,8), (66,4), (67,1), (68,9), (71,5), (76,8), (79,7), (80,9))\n"},"focus":true},{"text":"def checkT(board: List[(Int,Int)], next: (Int,Int)): Boolean = {\n\tdef tile(index: Int): Int = {\n\t\tval y: Int = index % 9\n\t\tval x: Int = index / 9\n\t\t(x,y) match {\n\t\t\tcase _ if (0 to 2 contains y) && (0 to 2 contains x) => 0\n\t\t\tcase _ if (3 to 5 contains y) && (0 to 2 contains x) => 1\n\t\t\tcase _ if (6 to 8 contains y) && (0 to 2 contains x) => 2\n\t\t\tcase _ if (0 to 2 contains y) && (3 to 5 contains x) => 3\n\t\t\tcase _ if (3 to 5 contains y) && (3 to 5 contains x) => 4\n\t\t\tcase _ if (6 to 8 contains y) && (3 to 5 contains x) => 5\n\t\t\tcase _ if (0 to 2 contains y) && (6 to 8 contains x) => 6\n\t\t\tcase _ if (3 to 5 contains y) && (6 to 8 contains x) => 7\n\t\t\tcase _ if (6 to 8 contains y) && (6 to 8 contains x) => 8\n\t\t}\n\t} \n\tdef check(b: Boolean, tuple: (Int,Int)) = \n\t\t{ b && ((tile(tuple._1) == tile(next._1) && tuple._2 != next._2) || tile(tuple._1) != tile(next._1)) }\n\tboard.foldLeft(true)(check)    \n}\n\ndef notPlayed(board: List[(Int,Int)], index: Int): Boolean = {\n\t!(board map {x => x._1} contains index)\n}\n\ndef isLegal(board: List[(Int,Int)], next: (Int,Int)): Boolean = {\n\tcheckX(board, next) && checkY(board, next) && checkT(board, next) \n}\n","dateUpdated":"Feb 22, 2016 8:28:23 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456201573379_-1708111153","id":"20160222-202613_1317331652","result":{"code":"SUCCESS","type":"TEXT","msg":"res596: Int = 1\n"},"dateCreated":"Feb 22, 2016 8:26:13 PM","dateStarted":"Feb 22, 2016 8:26:24 PM","dateFinished":"Feb 22, 2016 8:26:24 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:824"},{"text":"def sudokuSolve(initial: List[(Int,Int)]): Set[List[(Int,Int)]] = {\n\tval indices = (0 until 81) filter {notPlayed(initial,_)} toList\n\tdef sudokuIter(indices: List[Int]): Set[List[(Int,Int)]] = indices match {\n\t\tcase Nil => Set(initial)\n\t\tcase index::tail => for {\n\t\t\tboard <- sudokuIter(tail)\n\t\t\tk <- 1 until 10\n\t\t\tif isLegal(board, (index,k))\n\t\t} yield (index,k)::board        \n\t}\n\tsudokuIter(indices)\n}\n\n\n","dateUpdated":"Feb 22, 2016 8:29:36 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456201584375_42896415","id":"20160222-202624_1415716419","dateCreated":"Feb 22, 2016 8:26:24 PM","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:844"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1456201524326_373749297","id":"20160222-202524_479768931","dateCreated":"Feb 22, 2016 8:25:24 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:756","dateUpdated":"Feb 22, 2016 8:27:00 PM","dateFinished":"Feb 22, 2016 8:27:00 PM","dateStarted":"Feb 22, 2016 8:27:00 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"solns: List[List[(Int, Int)]] = List(List((0,3), (1,4), (2,5), (3,6), (4,7), (5,8), (6,9), (7,1), (8,2), (9,6), (10,7), (11,2), (15,3), (16,4), (17,8), (18,1), (21,3), (22,4), (23,2), (24,5), (26,7), (28,5), (29,9), (30,7), (32,1), (33,4), (34,2), (37,2), (38,6), (40,5), (42,7), (43,9), (46,1), (47,3), (48,9), (50,4), (51,8), (52,5), (54,9), (56,1), (57,5), (58,3), (59,7), (62,4), (63,2), (64,8), (65,7), (69,6), (70,3), (72,5), (73,3), (74,4), (75,2), (77,6), (78,1), (12,1), (13,9), (14,5), (19,9), (20,8), (25,6), (27,8), (31,6), (35,3), (36,4), (39,8), (41,3), (44,1), (45,7), (49,2), (53,6), (55,6), (60,2), (61,8), (66,4), (67,1), (68,9), (71,5), (76,8), (79,7), (80,9)), List((0,5), (1,3), (2,4), (3,6), (4,7), (5,8), (6,9), (7,1), (8,2), (9,6), (10,7), (11,2), (15,3), (16,4), (17,8), (...res602: Int = 2\n"},"text":"val solns = sudokuSolve(initial).toList\nsolns.size"}],"name":"sfds-lab5","id":"2BBS2FMZ5","angularObjects":{"2BBX9KVBV":[],"2B9T31FJZ":[],"2BC97GWDB":[],"2BBRY8E4A":[],"2BBJF778P":[],"2BADXE7AU":[],"2BCSZYWYA":[],"2BC6W6857":[],"2BBBV3PP8":[],"2B956YWNV":[],"2BB6YM4DJ":[],"2B92D2YFF":[],"2BBG6HC2F":[],"2BAQREC7J":[]},"config":{"looknfeel":"default"},"info":{}}